{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"RT_Va",
				"RT_VarTable_get"
			],
			[
				"l",
				"lhs_type"
			],
			[
				"exp",
				"expr"
			],
			[
				"con",
				"condition_type"
			],
			[
				"def",
				"default"
			],
			[
				"RT_Vart",
				"RT_VarTable_get"
			],
			[
				"lex_get",
				"lex_get_tokcode"
			],
			[
				"AST_E",
				"AST_Expression_t"
			],
			[
				"inc",
				"inc\t#include \"â€¦\""
			],
			[
				"stdi",
				"stdint.h>"
			],
			[
				"sdl",
				"stdlib.h"
			],
			[
				"RT_Data",
				"RT_Data_null"
			],
			[
				"run",
				"runtime.h\""
			],
			[
				"RT_StackEntry_",
				"RT_StackEntry_States_t"
			],
			[
				"it",
				"iterable"
			],
			[
				"d",
				"data.h\""
			],
			[
				"STACKENTRY_",
				"STACKENTRY_TYPE_SCOPE_POP"
			],
			[
				"le",
				"lexer.h\""
			],
			[
				"LEX",
				"LEXBASE_8"
			],
			[
				"IN",
				"INT_MAX"
			],
			[
				"unord",
				"unordered_set"
			],
			[
				"ios",
				"iostream>"
			],
			[
				"RT_DataLi",
				"RT_DataList_destroy"
			],
			[
				"itr",
				"iterable"
			],
			[
				"RT_DATA",
				"RT_DATA_TYPE_LST"
			],
			[
				"R",
				"RT_DATA_TYPE_BUL"
			],
			[
				"i",
				"iterable"
			],
			[
				"for",
				"for_block"
			],
			[
				"by",
				"by_i"
			],
			[
				"end",
				"end_i"
			],
			[
				"start",
				"start_i"
			],
			[
				"str",
				"string.h>"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/runtime.c",
			"redo_stack":
			[
				[
					106,
					1,
					"left_delete",
					null,
					"BAAAAI97AAAAAAAAkHsAAAAAAAAAAAAAkHsAAAAAAACRewAAAAAAAAAAAACRewAAAAAAAJJ7AAAAAAAAAAAAAJJ7AAAAAAAAk3sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj3sAAAAAAACPewAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "usr"
					},
					"AwAAAJJ7AAAAAAAAknsAAAAAAAABAAAAcpF7AAAAAAAAkXsAAAAAAAABAAAAc5B7AAAAAAAAkHsAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAk3sAAAAAAACTewAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 31632,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHnYAAAAAAAAedgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHnYAAAAAAAAedgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHnYAAAAAAAAedgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debug.log",
			"settings":
			{
				"buffer_size": 27907,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "aviruk@i5-11G7:~/git/shsc-lang/src$ make run-dbg ."
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAA20AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/runtime/util/evalstack.c.h",
			"settings":
			{
				"buffer_size": 2096,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "\n#in"
					},
					"BAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							5,
							10,
							3
						],
						"trigger": "include"
					},
					"AwAAAIgAAAAAAAAAiAAAAAAAAAABAAAAbocAAAAAAAAAhwAAAAAAAAABAAAAaYcAAAAAAAAAlwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAJAAAAAAAAAAkAAAAAAAAAAGAAAAaGVhZGVy",
					"AQAAAAAAAAABAAAAkAAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAI8AAAAAAAAAjwAAAAAAAAABAAAAPI8AAAAAAAAAjwAAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAI8AAAAAAAAAkQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "io"
					},
					"AgAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							10,
							15,
							2
						],
						"trigger": "io.h\""
					},
					"AgAAAJAAAAAAAAAAkAAAAAAAAAADAAAAaW8ikAAAAAAAAACVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/runtime/vartable.c.h",
			"settings":
			{
				"buffer_size": 10757,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"git pull",
				"Git: Pull"
			],
			[
				"term",
				"Terminus: List Shells"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"ga",
				"Git: Add All"
			],
			[
				"gp",
				"Git: Push"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"the",
				"UI: Customize Theme"
			],
			[
				"lsp res",
				"LSP: Restart Server"
			],
			[
				"lsp en",
				"LSP: Enable Language Server Globally"
			],
			[
				"colo",
				"UI: Customize Color Scheme"
			],
			[
				"gc",
				"Git: Commit"
			],
			[
				"termi",
				"Terminus: Close All"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"comm",
				"Git: Amend Commit"
			],
			[
				"gat ad",
				"Git: Add All"
			],
			[
				"gdi",
				"Git: Diff All Files"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"fol",
				"Code Folding: Fold All"
			],
			[
				"pu",
				"Git: Pull"
			],
			[
				"am",
				"Git: Amend Commit"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"git pll",
				"Git: Pull"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"th",
				"UI: Select Theme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"cop",
				"File: Copy Path"
			],
			[
				"ren",
				"Rename File"
			],
			[
				"fo",
				"LSP: Format File"
			],
			[
				"for",
				"LSP: Format File"
			],
			[
				"frm",
				"Clang Format: Select Style"
			],
			[
				"form",
				"LSP: Format File"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"lsp",
				"LSP: Toggle Log Panel"
			],
			[
				"bui",
				"Build With: Make"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"ter",
				"Preferences: Terminus Settings"
			],
			[
				"clang",
				"Preferences: LSP-clangd Settings"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"side",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"pack",
				"Package Control: Remove Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 233.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/aviruk/git/shsc-lang",
		"/home/aviruk/git/shsc-lang/include",
		"/home/aviruk/git/shsc-lang/include/ast",
		"/home/aviruk/git/shsc-lang/src",
		"/home/aviruk/git/shsc-lang/src/runtime",
		"/home/aviruk/git/shsc-lang/src/runtime/util"
	],
	"file_history":
	[
		"/home/aviruk/git/shsc-lang/include/runtime.h",
		"/home/aviruk/git/shsc-lang/include/ast/api.h",
		"/home/aviruk/git/shsc-lang/src/runtime/data.c.h",
		"/home/aviruk/git/shsc-lang/include/ast.h",
		"/home/aviruk/git/shsc-lang/include/ast2json.h",
		"/home/aviruk/git/shsc-lang/include/ast/nodes/enums.h",
		"/home/aviruk/git/shsc-lang/compile_flags.txt",
		"/C/Users/aviruk/git/shsc-lang/src/main.c",
		"/C/Users/aviruk/git/shsc-lang/test.log",
		"/C/Users/aviruk/git/shsc-lang/tests/SyntaxTree.json",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/vartable.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/vartable.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/nodes/create.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser.y",
		"/C/Users/aviruk/git/shsc-lang/src/ast2json.c",
		"/C/Users/aviruk/git/shsc-lang/shsc-lang.sublime-project",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/LSP.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/LSP/LSP.sublime-settings",
		"/C/Users/aviruk/git/shsc-lang/include/runtime.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime.c",
		"/C/Users/aviruk/git/shsc-lang/Makefile",
		"/C/Users/aviruk/git/shsc-lang/include/lexer.h",
		"/C/Users/aviruk/git/shsc-lang/docs/CONTRIBUTING.md",
		"/C/Users/aviruk/git/shsc-lang/include/parser.yy.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data/string.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data/list.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_bool.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_chr.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_f64.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_i64.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_str.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/buffer.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/io.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_identifiers.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_literals.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_keywords.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/nodes/destroy.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/util/module_stack.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/util/procedure_map.c.h",
		"/C/Unix/llvm-mingw-64/include/stdlib.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/io.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/util/evalstack.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes/create.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/util.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/api.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes.h",
		"/C/Users/aviruk/git/shsc-lang/compile_flags.txt",
		"/C/Users/aviruk/git/shsc-lang/include/parser.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data/list.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data/string.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast.h",
		"/C/Users/aviruk/git/shsc-lang/include/io.h",
		"/C/Users/aviruk/codes/gfg-shortest-source-to-destination-path.cpp",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/clang_format_custom.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/clang_format.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Clang Format/clang_format_custom.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Clang Format/clang_format.sublime-settings",
		"/C/Users/aviruk/git/shsc-lang/compile_commands.json",
		"/C/Users/aviruk/git/shsc-lang/src/lexer.c",
		"/C/Users/aviruk/git/shsc-lang/.clangd",
		"/C/Users/aviruk/git/shsc-lang/tests/test.txt",
		"/C/Users/aviruk/git/shsc-lang/tests/dump.txt",
		"/C/Users/aviruk/git/shsc-lang/tests/tlib/stacktest.c",
		"/C/Users/aviruk/git/shsc-lang/src/Makefile",
		"/C/Users/aviruk/git/shsc-lang/include/ast2json.h",
		"/C/Unix/llvm-mingw-64/include/stdio.h",
		"/C/Users/aviruk/git/shsc-lang/include/errcodes.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes/enums.h",
		"/C/Users/aviruk/git/shsc-lang/src/io.c",
		"/C/Users/aviruk/AppData/Local/Sublime Text/Package Storage/LSP-clangd/clangd_16.0.2/lib/clang/16/include/stdarg.h",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/Package Control.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Package Control/Package Control.sublime-settings",
		"/D/0/Linux/home/aviruk/Downloads/xhash.c"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" = RT_Data_null(),"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" = NULL,"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/runtime.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31632,
						"regions":
						{
						},
						"selection":
						[
							[
								31632,
								31632
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 20,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/src/runtime.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 12486.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "debug.log",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27907,
						"regions":
						{
						},
						"selection":
						[
							[
								27907,
								27907
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								}
							],
							"auto_name": "aviruk@i5-11G7:~/git/shsc-lang/src$ make run-dbg .",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/debug.log",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6545.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "src/runtime/util/evalstack.c.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2096,
						"regions":
						{
						},
						"selection":
						[
							[
								879,
								879
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										934,
										935
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										460,
										461
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/src/runtime/util/evalstack.c.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/runtime/vartable.c.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10757,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/src/runtime/vartable.c.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4224.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.46656254592,
			0.96993385448,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 488.0
	},
	"output.Terminus":
	{
		"height": 548.0
	},
	"output.diagnostics":
	{
		"height": 544.0
	},
	"output.exec":
	{
		"height": 126.400001526
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 178.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "shsc-lang.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 207.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
