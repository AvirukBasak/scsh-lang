{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"RT_Va",
				"RT_VarTable_get"
			],
			[
				"l",
				"lhs_type"
			],
			[
				"exp",
				"expr"
			],
			[
				"con",
				"condition_type"
			],
			[
				"def",
				"default"
			],
			[
				"RT_Vart",
				"RT_VarTable_get"
			],
			[
				"lex_get",
				"lex_get_tokcode"
			],
			[
				"AST_E",
				"AST_Expression_t"
			],
			[
				"inc",
				"inc\t#include \"â€¦\""
			],
			[
				"stdi",
				"stdint.h>"
			],
			[
				"sdl",
				"stdlib.h"
			],
			[
				"RT_Data",
				"RT_Data_null"
			],
			[
				"run",
				"runtime.h\""
			],
			[
				"RT_StackEntry_",
				"RT_StackEntry_States_t"
			],
			[
				"it",
				"iterable"
			],
			[
				"d",
				"data.h\""
			],
			[
				"STACKENTRY_",
				"STACKENTRY_TYPE_SCOPE_POP"
			],
			[
				"le",
				"lexer.h\""
			],
			[
				"LEX",
				"LEXBASE_8"
			],
			[
				"IN",
				"INT_MAX"
			],
			[
				"unord",
				"unordered_set"
			],
			[
				"ios",
				"iostream>"
			],
			[
				"RT_DataLi",
				"RT_DataList_destroy"
			],
			[
				"itr",
				"iterable"
			],
			[
				"RT_DATA",
				"RT_DATA_TYPE_LST"
			],
			[
				"R",
				"RT_DATA_TYPE_BUL"
			],
			[
				"i",
				"iterable"
			],
			[
				"for",
				"for_block"
			],
			[
				"by",
				"by_i"
			],
			[
				"end",
				"end_i"
			],
			[
				"start",
				"start_i"
			],
			[
				"str",
				"string.h>"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/runtime.c",
			"settings":
			{
				"buffer_size": 33454,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAkewAAI2luY2x1ZGUgPGludHR5cGVzLmg+CiNpbmNsdWRlIDxzdGRib29sLmg+CgojaW5jbHVkZSAiYXN0L2FwaS5oIgojaW5jbHVkZSAicnVudGltZS5oIgojaW5jbHVkZSAiYXN0L25vZGVzL2VudW1zLmgiCiNpbmNsdWRlICJsZXhlci5oIgojaW5jbHVkZSAicnVudGltZS9kYXRhLmgiCiNpbmNsdWRlICJydW50aW1lL2RhdGEvbGlzdC5oIgojaW5jbHVkZSAicnVudGltZS9kYXRhL3N0cmluZy5oIgojaW5jbHVkZSAicnVudGltZS9pby5oIgojaW5jbHVkZSAicnVudGltZS91dGlsL2V2YWxzdGFjay5oIgoKI2luY2x1ZGUgInJ1bnRpbWUvZGF0YS5jLmgiCiNpbmNsdWRlICJydW50aW1lL2lvLmMuaCIKI2luY2x1ZGUgInJ1bnRpbWUvdXRpbC9ldmFsc3RhY2suYy5oIgojaW5jbHVkZSAicnVudGltZS92YXJ0YWJsZS5jLmgiCiNpbmNsdWRlICJydW50aW1lL3ZhcnRhYmxlLmgiCgpjb25zdCBjaGFyICpydF9jdXJyZmlsZSA9IE5VTEw7CmludCBydF9jdXJybGluZSA9IDA7Cgp2b2lkIFJUX0FTVF9ldmFsKGNvbnN0IEFTVF9TdGF0ZW1lbnRzX3QgKmNvZGUpOwpSVF9EYXRhX3QgKlJUX0V4cHJlc3Npb25fZXZhbCh2b2lkKTsKUlRfRGF0YV90ICpSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCh2b2lkKTsKUlRfRGF0YV90IFJUX0V4cHJlc3Npb25fZXZhbF9sc3QoY29uc3QgQVNUX0NvbW1hU2VwTGlzdF90ICpsc3QpOwoKdm9pZCBydF9leGVjKHZvaWQpCnsKICAgIGNvbnN0IEFTVF9JZGVudGlmaWVyX3QgbW9kdWxlID0geyAuaWRlbnRpZmllcl9uYW1lID0gIm1haW4iIH07CiAgICBjb25zdCBBU1RfSWRlbnRpZmllcl90IHByb2MgPSB7IC5pZGVudGlmaWVyX25hbWUgPSAibWFpbiIgfTsKICAgIGNvbnN0IEFTVF9TdGF0ZW1lbnRzX3QgKmNvZGUgPSBBU1RfUHJvY2VkdXJlTWFwX2dldF9jb2RlKCZtb2R1bGUsICZwcm9jKTsKICAgIHJ0X2N1cnJmaWxlID0gQVNUX1Byb2NlZHVyZU1hcF9nZXRfZmlsZW5hbWUoJm1vZHVsZSwgJnByb2MpOwogICAgUlRfVmFyVGFibGVfcHVzaF9wcm9jKCJtYWluIiwgTlVMTCk7CiAgICBSVF9BU1RfZXZhbChjb2RlKTsKfQoKdm9pZCBSVF9BU1RfZXZhbChjb25zdCBBU1RfU3RhdGVtZW50c190ICpjb2RlKQp7CiAgICAvKiBwdXNoIGZpcnN0IHN0YXRlbWVudHMgKi8KICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gY29kZSwKICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX1NUQVRFTUVOVFMKICAgIH0pOwogICAgd2hpbGUgKCFSVF9FdmFsU3RhY2tfaXNlbXB0eSgpKSB7CiAgICAgICAgUlRfU3RhY2tFbnRyeV90IHBvcCA9IFJUX0V2YWxTdGFja19wb3AoKTsKICAgICAgICBzd2l0Y2ggKHBvcC50eXBlKSB7CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUzogewogICAgICAgICAgICAgICAgY29uc3QgQVNUX1N0YXRlbWVudHNfdCAqc3QgPSBwb3AuZW50cnkubm9kZS5jb2RlOwogICAgICAgICAgICAgICAgaWYgKCFzdCkgYnJlYWs7CiAgICAgICAgICAgICAgICAvKiBwdXNoIG5leHQgZW50cnkgdG8gZXZhbCAqLwogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLnN0YXRlbWVudCA9IHN0LT5zdGF0ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLyogcHVzaCBuZXh0IGVudHJ5ICovCiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHN0LT5zdGF0ZW1lbnRzLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX1NUQVRFTUVOVDogewogICAgICAgICAgICAgICAgY29uc3QgQVNUX1N0YXRlbWVudF90ICpzdCA9IHBvcC5lbnRyeS5ub2RlLnN0YXRlbWVudDsKICAgICAgICAgICAgICAgIGlmICghc3QpIGJyZWFrOwogICAgICAgICAgICAgICAgcnRfY3VycmxpbmUgPSBzdC0+bGluZV9ubzsKICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QtPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIFNUQVRFTUVOVF9UWVBFX0VNUFRZOiBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFNUQVRFTUVOVF9UWVBFX1JFVFVSTjogewogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHN0LT5zdGF0ZW1lbnQuZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgU1RBVEVNRU5UX1RZUEVfQVNTSUdOTUVOVDogewogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5hc3NpZ25tZW50ID0gc3QtPnN0YXRlbWVudC5hc3NpZ25tZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9BU1NJR05NRU5UCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FzZSBTVEFURU1FTlRfVFlQRV9DT01QT1VORDogewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBBU1RfQ29tcG91bmRTdF90ICpjbXBkID0gc3QtPnN0YXRlbWVudC5jb21wb3VuZF9zdGF0ZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX3B1c2hfc2NvcGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfVFlQRV9QUk9DX1BPUAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjbXBkLT50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENPTVBPVU5EU1RfVFlQRV9JRjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuaWZfYmxvY2sgPSBjbXBkLT5jb21wb3VuZF9zdGF0ZW1lbnQuaWZfYmxvY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfSUZfQkxPQ0sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ09NUE9VTkRTVF9UWVBFX1dISUxFOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS53aGlsZV9ibG9jayA9IGNtcGQtPmNvbXBvdW5kX3N0YXRlbWVudC53aGlsZV9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9XSElMRV9CTE9DSwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDT01QT1VORFNUX1RZUEVfRk9SOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUubHAuZm9yX2Jsb2NrID0gY21wZC0+Y29tcG91bmRfc3RhdGVtZW50LmZvcl9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLmxwLmkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZyA9IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfTE9PUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDT01QT1VORFNUX1RZUEVfQkxPQ0s6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBBU1RfU3RhdGVtZW50c190ICpzdCA9IGNtcGQtPmNvbXBvdW5kX3N0YXRlbWVudC5ibG9jay0+c3RhdGVtZW50czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmNvZGUgPSBzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9BU1NJR05NRU5UOiB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvcC5lbnRyeS5ub2RlLmFzc2lnbm1lbnQtPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIEFTU0lHTk1FTlRfVFlQRV9UT1ZPSUQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5hc3NpZ25tZW50LT5yaHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKCpSVF9FeHByZXNzaW9uX2V2YWwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlIEFTU0lHTk1FTlRfVFlQRV9DUkVBVEU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciAqaWRmID0gcG9wLmVudHJ5Lm5vZGUuYXNzaWdubWVudC0+bGhzLT5pZGVudGlmaWVyX25hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuYXNzaWdubWVudC0+cmhzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfY3JlYXRlKGlkZiwgKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9JRl9CTE9DSzogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuaWZfYmxvY2stPmNvbmRpdGlvbiwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJvb2wgY29uZCA9ICBSVF9EYXRhX3RvYm9vbCgqUlRfRXhwcmVzc2lvbl9ldmFsKCkpOwogICAgICAgICAgICAgICAgaWYgKGNvbmQpIHsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmNvZGUgPSBwb3AuZW50cnkubm9kZS5pZl9ibG9jay0+aWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmVsc2VfYmxvY2sgPSBwb3AuZW50cnkubm9kZS5pZl9ibG9jay0+ZWxzZV9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9FTFNFX0JMT0NLCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0VMU0VfQkxPQ0s6IHsKICAgICAgICAgICAgICAgIC8qIHRha2VzIGNhcmUgb2YgWyBlbHNlIG53cCBzdGF0ZW1lbnRzIGVuZCBdICovCiAgICAgICAgICAgICAgICBpZiAoIXBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmNvbmRpdGlvbiAmJiAhcG9wLmVudHJ5Lm5vZGUuZWxzZV9ibG9jay0+ZWxzZV9ibG9jaykgewogICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmVsc2VfaWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLyogdGFrZXMgY2FyZSBvZiBbIGVsc2UgaWYgY29uZGl0aW9uIHRoZW4gbndwIHN0YXRlbWVudHMgXSAqLwogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZWxzZV9ibG9jay0+Y29uZGl0aW9uLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYm9vbCBjb25kID0gUlRfRGF0YV90b2Jvb2woKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgIGlmIChjb25kKSB7CiAgICAgICAgICAgICAgICAgICAgLyogaWYgY29uZGl0aW9uIHRydWUsIGV4ZWN1dGUgc3RhdGVtZW50cyBhbmQgZG9uJ3QgZ28KICAgICAgICAgICAgICAgICAgICAgICBhbnkgZnVydGhlciBkb3duIHRoZSBlbHNlIGlmIGxhZGRlciAqLwogICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmVsc2VfaWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKiBpZiBjb25kaXRpb24gZmFpbGVkIGFuZCBubyBtb3JlIGVsc2UgaWYgYmxvY2tzLAogICAgICAgICAgICAgICAgICAgICAgIGp1c3QgYnJlYWsgb3V0IGFuZCBkbyBub3RoaW5nICovCiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkubm9kZS5lbHNlX2Jsb2NrLT5lbHNlX2Jsb2NrKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmVsc2VfYmxvY2sgPSBwb3AuZW50cnkubm9kZS5lbHNlX2Jsb2NrLT5lbHNlX2Jsb2NrLAogICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0VMU0VfQkxPQ0sKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfV0hJTEVfQkxPQ0s6IHsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHBvcC5lbnRyeS5ub2RlLndoaWxlX2Jsb2NrLT5jb25kaXRpb24sCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBib29sIGNvbmQgPSBSVF9EYXRhX3RvYm9vbCgqUlRfRXhwcmVzc2lvbl9ldmFsKCkpOwogICAgICAgICAgICAgICAgLyogaWYgY29uZGl0aW9uIGlzIHRydWUsIGRvbid0IGxldCB0aGUgd2hpbGUgYmUgcmVtb3ZlZCBmcm9tIHN0YWNrCiAgICAgICAgICAgICAgICAgICBpLmUuIHB1c2ggaXQgYmFjayBpbnRvIHRoZSBzdGFjayBjb3ogaXQgd2FzIHBvcHBlZCBlYXJsaWVyICovCiAgICAgICAgICAgICAgICBpZiAoY29uZCkgUlRfRXZhbFN0YWNrX3B1c2gocG9wKTsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gcG9wLmVudHJ5Lm5vZGUud2hpbGVfYmxvY2stPnN0YXRlbWVudHMsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9MT09QOiB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvcC5lbnRyeS5zdGF0ZS5scC5mb3JfYmxvY2stPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIEZPUkJMT0NLX1RZUEVfUkFOR0U6IHsKICAgICAgICAgICAgICAgICAgICAgICAgLyogaWYgbG9vcCBub3QgcnVubmluZywgc3RhcnQgaXQgYW5kIGV2YWwgcmFuZ2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2FsY3VsYXRlIHN0YXJ0LCBlbmQgYW5kIGJ5ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLnJhbmdlLnN0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YV90IHN0YXJ0ID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0LnR5cGUgIT0gUlRfREFUQV9UWVBFX0k2NCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygiZm9yIGxvb3AgcmFuZ2Ugc3RhcnQgc2hvdWxkIGJlIGFuIGk2NCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5pdGVyYWJsZS5yYW5nZS5lbmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX3QgZW5kID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZC50eXBlICE9IFJUX0RBVEFfVFlQRV9JNjQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRfdGhyb3coImZvciBsb29wIHJhbmdlIGVuZCBzaG91bGQgYmUgYW4gaTY0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX3QgYnkgPSBSVF9EYXRhX251bGwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLnJhbmdlLmJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHBvcC5lbnRyeS5ub2RlLmZvcl9ibG9jay0+aXRlcmFibGUucmFuZ2UuYnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSA9ICpSVF9FeHByZXNzaW9uX2V2YWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnkudHlwZSAhPSBSVF9EQVRBX1RZUEVfSTY0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygiZm9yIGxvb3AgYnkgdmFsdWUgc2hvdWxkIGJlIGFuIGk2NCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50NjRfdCBzdGFydF9pID0gc3RhcnQuZGF0YS5pNjQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnQ2NF90IGVuZF9pID0gZW5kLmRhdGEuaTY0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50NjRfdCBieV9pID0gUlRfRGF0YV9pc251bGwoYnkpID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhcnRfaSA8PSBlbmRfaSA/ICsxIDogLTEpIDogYnkuZGF0YS5pNjQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJ5X2kpIHJ0X3Rocm93KCJmb3IgbG9vcCBieSB2YWx1ZSBjYW5ub3QgYmUgMCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoc3RhcnRfaSA8IGVuZF9pICYmIGJ5X2kgPCAwKSB8fCAoc3RhcnRfaSA+IGVuZF9pICYmIGJ5X2kgPiAwKSApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRfdGhyb3coInBvc3NpYmxlIGluZmluaXRlIGZvciBsb29wIGZvciBieSB2YWx1ZSAnJSIgUFJJZDY0ICInIiwgYnlfaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBhZGQgbG9vcCBpbmZvIHRvIGZvciBsb29wIHN0YWNrIGVudHJ5ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2Uuc3RhcnQgPSBzdGFydF9pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmVuZCA9IGVuZF9pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmJ5ID0gYnlfaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHNldCBpIHRvIHN0YXJ0IG9mIHJhbmdlICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaSA9IHN0YXJ0X2k7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdGFydCBsb29wICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBwb3AuZW50cnkuc3RhdGUubHAuaSArPSBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2UuYnk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5yYW5nZS5ieSA+IDAgJiYgcG9wLmVudHJ5LnN0YXRlLmxwLmkgPj0gcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmVuZCkKICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAocG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmJ5IDwgMCAmJiBwb3AuZW50cnkuc3RhdGUubHAuaSA8PSBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2UuZW5kKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvKiBicmVhaywgaS5lLiBkb24ndCBwdXNoIG5ldyBsb29wIHN0YXRlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9wLmVudHJ5LnN0YXRlLmxwLmlzX3J1bm5pbmcpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9jcmVhdGUocG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5pdGVyLT5pZGVudGlmaWVyX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX2k2NChwb3AuZW50cnkuc3RhdGUubHAuaSkpOwogICAgICAgICAgICAgICAgICAgICAgICAvKiBwdXNoIG5ld2x5IG1vZGlmaWVkIGxvb3Agc3RhdGUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2gocG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmZvcl9ibG9jay0+c3RhdGVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgRk9SQkxPQ0tfVFlQRV9MSVNUOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlmIGxvb3Agbm90IHJ1bm5pbmcsIHN0YXJ0IGl0IGFuZCBldmFsIGxpc3QgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29udmVydCBleHByZXNzaW9uIHRvIGEgZGF0YSBsaXN0ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLmxzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJUX0RhdGFfdCBkYXRhID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9MU1Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnR5cGUgPSBSVF9EQVRBX1RZUEVfTFNUOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QgPSBkYXRhLmRhdGEubHN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9TVFI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnR5cGUgPSBSVF9EQVRBX1RZUEVfU1RSOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5zdHIgPSBkYXRhLmRhdGEuc3RyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygidW5zdXBwb3J0ZWQgZGF0YSB0eXBlIGluIGl0ZXJhdG9yIHR5cGUgZm9yIGxvb3AiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHBvcC5lbnRyeS5zdGF0ZS5scC5pICs9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNhbGMgbGlzIGxlbmd0aCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpbnQ2NF90IGxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIudHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfTFNUOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IFJUX0RhdGFMaXN0X2xlbmd0aChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfU1RSOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IFJUX0RhdGFTdHJfbGVuZ3RoKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnN0cik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bnN1cHBvcnRlZCBkYXRhIHR5cGUgaW4gaXRlcmF0b3IgdHlwZSBmb3IgbG9vcCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0b3AgbG9vcCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLmkgPj0gbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkZXN0cm95IGxpc3QgaWYgcmMgaXMgMCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfTFNUOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIubHN0LT5yYyA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YUxpc3RfZGVzdHJveSgmcG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIubHN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfU1RSOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIuc3RyLT5yYyA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YVN0cl9kZXN0cm95KCZwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5zdHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygidW5zdXBwb3J0ZWQgZGF0YSB0eXBlIGluIGl0ZXJhdG9yIHR5cGUgZm9yIGxvb3AiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvKiBicmVhaywgaS5lLiBkb24ndCBwdXNoIG5ldyBsb29wIHN0YXRlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9wLmVudHJ5LnN0YXRlLmxwLmlzX3J1bm5pbmcpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZSBjdXJyZW50IGl0ZXJhdGlvbiBlbGVtZW50IGluIGxvb3AgdmFyaWFibGUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9MU1Q6IFJUX1ZhclRhYmxlX2NyZWF0ZShwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXItPmlkZW50aWZpZXJfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlJUX0RhdGFMaXN0X2dldHJlZihwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QsIHBvcC5lbnRyeS5zdGF0ZS5scC5pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9TVFI6IFJUX1ZhclRhYmxlX2NyZWF0ZShwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXItPmlkZW50aWZpZXJfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YV9jaHIoKlJUX0RhdGFTdHJfZ2V0cmVmKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnN0ciwgcG9wLmVudHJ5LnN0YXRlLmxwLmkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bnN1cHBvcnRlZCBkYXRhIHR5cGUgaW4gaXRlcmF0b3IgdHlwZSBmb3IgbG9vcCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHB1c2ggbmV3bHkgbW9kaWZpZWQgbG9vcCBzdGF0ZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaChwb3ApOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gcG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5zdGF0ZW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUjogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIFJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX1RZUEVfU0NPUEVfUE9QOiB7CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9wb3Bfc2NvcGUoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfQ09NTUFfU0VQX0xJU1Q6CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfTElURVJBTDoKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9JREVOVElGSUVSOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0ZPUl9CTE9DSzoKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9FWFBSRVNTSU9OOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfVFlQRV9BU1ROT0RFOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfVFlQRV9TVEFURToKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX1RZUEVfUFJPQ19QT1A6IGJyZWFrOwogICAgICAgIH0KICAgIH0KfQoKUlRfRGF0YV90ICpSVF9FeHByZXNzaW9uX2V2YWwodm9pZCkKewogICAgaWYgKFJUX0V2YWxTdGFja19pc2VtcHR5KCkpCiAgICAgICAgaW9fZXJybmRpZSgiUlRfRXhwcmVzc2lvbl9ldmFsOiBzdGFjayB1bmRlcmZsb3ciKTsKICAgIGVsc2UgaWYgKFJUX0V2YWxTdGFja190b3AoKS50eXBlICE9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUikKICAgICAgICBpb19lcnJuZGllKCJSVF9FeHByZXNzaW9uX2V2YWw6IG5vIGV4cHJlc3Npb24gYXQgc3RhY2sgdG9wIik7CiAgICAvKiBzZXQgYWNjdW11bGF0b3IgdG8gbnVsbCAqLwogICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAvKiBkZnMgdGhlIGV4cHJlc3Npb24gdHJlZSBhbmQgZXZhbHVhdGUgKi8KICAgIHdoaWxlICghUlRfRXZhbFN0YWNrX2lzZW1wdHkoKSAmJiBSVF9FdmFsU3RhY2tfdG9wKCkudHlwZSA9PSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIpIHsKICAgICAgICBSVF9TdGFja0VudHJ5X3QgcG9wID0gUlRfRXZhbFN0YWNrX3BvcCgpOwogICAgICAgIGNvbnN0IEFTVF9FeHByZXNzaW9uX3QgKmV4cHIgPSBwb3AuZW50cnkuc3RhdGUueHAuZXhwcjsKICAgICAgICAvKiBldmFsIGxocyBvcGVyYW5kICovCiAgICAgICAgaWYgKFJUX0RhdGFfaXNudWxsKFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsKQogICAgICAgICAmJiAhUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIpIHN3aXRjaCAoZXhwci0+bGhzX3R5cGUpIHsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfRVhQUkVTU0lPTjogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gZXhwci0+bGhzLmV4cHIsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9MSVRFUkFMOgogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmxpdGVyYWwgPSBleHByLT5saHMubGl0ZXJhbCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0xJVEVSQUwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsKCk7CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9JREVOVElGSUVSOgogICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX1ZhclRhYmxlX2dldHJlZihleHByLT5saHMudmFyaWFibGUtPmlkZW50aWZpZXJfbmFtZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTlVMTDogYnJlYWs7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyID8KICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyIDogJlJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsOwogICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgICAgICB9CiAgICAgICAgLyogZXZhbCByaHMgb3BlcmFuZCAqLwogICAgICAgIGlmIChSVF9EYXRhX2lzbnVsbChSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPnZhbCkKICAgICAgICAgJiYgIVJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyKSBzd2l0Y2ggKGV4cHItPnJoc190eXBlKSB7CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX0VYUFJFU1NJT046IHsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IGV4cHItPnJocy5leHByLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTElURVJBTDoKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5saXRlcmFsID0gZXhwci0+cmhzLmxpdGVyYWwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9MSVRFUkFMCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCgpOwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfSURFTlRJRklFUjoKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9WYXJUYWJsZV9nZXRyZWYoZXhwci0+cmhzLnZhcmlhYmxlLT5pZGVudGlmaWVyX25hbWUpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX05VTEw6IGJyZWFrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA/CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA6ICZSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPnZhbDsKICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgfQogICAgICAgIC8qIGV2YWwgY29uZGl0aW9uIG9wZXJhbmQgKi8KICAgICAgICBpZiAoUlRfRGF0YV9pc251bGwoUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWwpCiAgICAgICAgICYmICFSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkcikgc3dpdGNoIChleHByLT5jb25kaXRpb25fdHlwZSkgewogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9FWFBSRVNTSU9OOiB7CiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBleHByLT5jb25kaXRpb24uZXhwciwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX0xJVEVSQUw6CiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUubGl0ZXJhbCA9IGV4cHItPmNvbmRpdGlvbi5saXRlcmFsLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfTElURVJBTAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCgpOwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfSURFTlRJRklFUjoKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IFJUX1ZhclRhYmxlX2dldHJlZihleHByLT5jb25kaXRpb24udmFyaWFibGUtPmlkZW50aWZpZXJfbmFtZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTlVMTDogYnJlYWs7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgPwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgOiAmUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWw7CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9udWxsKCkpOwogICAgICAgIH0KICAgICAgICAvKiBhbGwgb3BlcmFuZHMgZXZhbHVhdGVkLCBub3cgcGVyZm9ybSBvcGVyYXRpb25zICovCiAgICAgICAgc3dpdGNoIChleHByLT5vcCkgewogICAgICAgICAgICBjYXNlIExFWFRPS19CQU5HOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX1VORVFVQUw6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BFUkNFTlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX01PRFVMT19BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FNUEVSU0FORDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9BTkQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0xPR0lDQUxfQU5EX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9BTkRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19BU1RFUklYOgogICAgICAgICAgICBjYXNlIExFWFRPS19FWFBPTkVOVDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRVhQT05FTlRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19NVUxUSVBMWV9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BMVVM6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0lOQ1JFTUVOVDoKICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bmFyeSBpbmNyZW1lbnQgb3BlcmF0b3IgaXMgbm90IHlldCBzdXBwb3J0ZWQiKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIExFWFRPS19BRERfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19NSU5VUzoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfREVDUkVNRU5UOgogICAgICAgICAgICBjYXNlIExFWFRPS19TVUJTVFJBQ1RfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19ET1Q6CiAgICAgICAgICAgICAgICBydF90aHJvdygibWVtZWJlcnNoaXAgb3BlcmF0b3IgaXMgbm90IHlldCBzdXBwb3J0ZWQiKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIExFWFRPS19GU0xBU0g6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0ZMT09SX0RJVklERToKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRkxPT1JfRElWSURFX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRElWSURFX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRENPTE9OOgogICAgICAgICAgICBjYXNlIExFWFRPS19MQlJBQ0VfQU5HVUxBUjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9MU0hJRlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0JJVFdJU0VfTFNISUZUX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9MRVNTRVJfRVFVQUw6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FTU0lHTjogewogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfbW9kZihwb3AuZW50cnkuc3RhdGUueHAubGhzLCAqcG9wLmVudHJ5LnN0YXRlLnhwLnJocyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX0VRVUFMOgogICAgICAgICAgICBjYXNlIExFWFRPS19SQlJBQ0VfQU5HVUxBUjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9HUkVBVEVSX0VRVUFMOgogICAgICAgICAgICBjYXNlIExFWFRPS19CSVRXSVNFX1JTSElGVDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9SU0hJRlRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19BUklUSF9SU0hJRlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FSSVRIX1JTSElGVF9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0NBUkVUOgogICAgICAgICAgICBjYXNlIExFWFRPS19CSVRXSVNFX1hPUl9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BJUEU6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0JJVFdJU0VfT1JfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX09SOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX09SX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfVElMREU6CiAgICAgICAgICAgIGNhc2UgVE9LT1BfRk5DQUxMOgogICAgICAgICAgICBjYXNlIFRPS09QX0lOREVYSU5HOgogICAgICAgICAgICBjYXNlIFRPS09QX1RFUk5BUllfQ09ORDoKICAgICAgICAgICAgY2FzZSBUT0tPUF9GTkFSR1NfSU5ERVhJTkc6IGJyZWFrOwogICAgICAgICAgICBjYXNlIFRPS09QX05PUDogYnJlYWs7CiAgICAgICAgICAgIC8qIHN0dWZmIHRoYXQgZG9lc24ndCBmb3JtIGFuIG9wZXJhdGlvbiAqLwogICAgICAgICAgICBkZWZhdWx0OiBpb19lcnJuZGllKCJSVF9FeHByZXNzaW9uX2V2YWw6IGludmFsaWQgb3BlcmF0aW9uICclcyciLCBsZXhfZ2V0X3Rva2NvZGUoZXhwci0+b3ApKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgPwogICAgICAgIFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyIDogJlJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsOwp9CgpSVF9EYXRhX3QgKlJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsKHZvaWQpCnsKICAgIGlmIChSVF9FdmFsU3RhY2tfaXNlbXB0eSgpKQogICAgICAgIGlvX2Vycm5kaWUoIlJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsOiBzdGFjayB1bmRlcmZsb3ciKTsKICAgIGVsc2UgaWYgKFJUX0V2YWxTdGFja190b3AoKS50eXBlICE9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0xJVEVSQUwpCiAgICAgICAgaW9fZXJybmRpZSgiUlRfRXhwcmVzc2lvbl9ldmFsX2xpdGVyYWw6IG5vIGxpdGVyYWwgYXQgc3RhY2sgdG9wIik7CiAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgIFJUX1N0YWNrRW50cnlfdCBwb3AgPSBSVF9FdmFsU3RhY2tfcG9wKCk7CiAgICBjb25zdCBBU1RfTGl0ZXJhbF90ICpsaXQgPSBwb3AuZW50cnkubm9kZS5saXRlcmFsOwogICAgc3dpdGNoIChsaXQtPnR5cGUpIHsKICAgICAgICBjYXNlIERBVEFfVFlQRV9CVUw6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9idWwobGl0LT5kYXRhLmJ1bCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9DSFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9jaHIobGl0LT5kYXRhLmNocikpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9JNjQ6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9pNjQobGl0LT5kYXRhLmk2NCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9GNjQ6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9mNjQobGl0LT5kYXRhLmY2NCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9TVFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9zdHIoUlRfRGF0YVN0cl9pbml0KGxpdC0+ZGF0YS5zdHIpKSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgREFUQV9UWVBFX0lOVEVSUF9TVFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9pbnRlcnBfc3RyKFJUX0RhdGFTdHJfaW5pdChsaXQtPmRhdGEuc3RyKSkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9MU1Q6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRXhwcmVzc2lvbl9ldmFsX2xzdChsaXQtPmRhdGEubHN0KSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgREFUQV9UWVBFX0FOWToKICAgICAgICAgICAgLyogdm9pZCogbXVzdCBiZSBleHBsaWNpdGx5IGNhc3RlZCAqLwogICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfYW55KCh2b2lkKikgbGl0LT5kYXRhLmFueSkpOwogICAgICAgICAgICBicmVhazsKICAgIH0KICAgIHJldHVybiBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA/CiAgICAgICAgUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgOiAmUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWw7Cn0KClJUX0RhdGFfdCBSVF9FeHByZXNzaW9uX2V2YWxfbHN0KGNvbnN0IEFTVF9Db21tYVNlcExpc3RfdCAqbHN0KQp7CiAgICBjb25zdCBBU1RfQ29tbWFTZXBMaXN0X3QgKnB0ciA9IGxzdDsKICAgIFJUX0RhdGFMaXN0X3QgKm5ld19saXN0ID0gUlRfRGF0YUxpc3RfaW5pdCgpOwogICAgd2hpbGUgKHB0cikgewogICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwdHItPmV4cHJlc3Npb24sCiAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICB9KTsKICAgICAgICBSVF9EYXRhTGlzdF9hcHBlbmQobmV3X2xpc3QsICpSVF9FeHByZXNzaW9uX2V2YWwoKSk7CiAgICAgICAgcHRyID0gcHRyLT5jb21tYV9saXN0OwogICAgfQogICAgcmV0dXJuIFJUX0RhdGFfbGlzdChuZXdfbGlzdCk7Cn0KAAAAAAAAAAAkewAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMaQAAAAAAAExpAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAkewAAI2luY2x1ZGUgPGludHR5cGVzLmg+CiNpbmNsdWRlIDxzdGRib29sLmg+CgojaW5jbHVkZSAiYXN0L2FwaS5oIgojaW5jbHVkZSAicnVudGltZS5oIgojaW5jbHVkZSAiYXN0L25vZGVzL2VudW1zLmgiCiNpbmNsdWRlICJsZXhlci5oIgojaW5jbHVkZSAicnVudGltZS9kYXRhLmgiCiNpbmNsdWRlICJydW50aW1lL2RhdGEvbGlzdC5oIgojaW5jbHVkZSAicnVudGltZS9kYXRhL3N0cmluZy5oIgojaW5jbHVkZSAicnVudGltZS9pby5oIgojaW5jbHVkZSAicnVudGltZS91dGlsL2V2YWxzdGFjay5oIgoKI2luY2x1ZGUgInJ1bnRpbWUvZGF0YS5jLmgiCiNpbmNsdWRlICJydW50aW1lL2lvLmMuaCIKI2luY2x1ZGUgInJ1bnRpbWUvdXRpbC9ldmFsc3RhY2suYy5oIgojaW5jbHVkZSAicnVudGltZS92YXJ0YWJsZS5jLmgiCiNpbmNsdWRlICJydW50aW1lL3ZhcnRhYmxlLmgiCgpjb25zdCBjaGFyICpydF9jdXJyZmlsZSA9IE5VTEw7CmludCBydF9jdXJybGluZSA9IDA7Cgp2b2lkIFJUX0FTVF9ldmFsKGNvbnN0IEFTVF9TdGF0ZW1lbnRzX3QgKmNvZGUpOwpSVF9EYXRhX3QgKlJUX0V4cHJlc3Npb25fZXZhbCh2b2lkKTsKUlRfRGF0YV90ICpSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCh2b2lkKTsKUlRfRGF0YV90IFJUX0V4cHJlc3Npb25fZXZhbF9sc3QoY29uc3QgQVNUX0NvbW1hU2VwTGlzdF90ICpsc3QpOwoKdm9pZCBydF9leGVjKHZvaWQpCnsKICAgIGNvbnN0IEFTVF9JZGVudGlmaWVyX3QgbW9kdWxlID0geyAuaWRlbnRpZmllcl9uYW1lID0gIm1haW4iIH07CiAgICBjb25zdCBBU1RfSWRlbnRpZmllcl90IHByb2MgPSB7IC5pZGVudGlmaWVyX25hbWUgPSAibWFpbiIgfTsKICAgIGNvbnN0IEFTVF9TdGF0ZW1lbnRzX3QgKmNvZGUgPSBBU1RfUHJvY2VkdXJlTWFwX2dldF9jb2RlKCZtb2R1bGUsICZwcm9jKTsKICAgIHJ0X2N1cnJmaWxlID0gQVNUX1Byb2NlZHVyZU1hcF9nZXRfZmlsZW5hbWUoJm1vZHVsZSwgJnByb2MpOwogICAgUlRfVmFyVGFibGVfcHVzaF9wcm9jKCJtYWluIiwgTlVMTCk7CiAgICBSVF9BU1RfZXZhbChjb2RlKTsKfQoKdm9pZCBSVF9BU1RfZXZhbChjb25zdCBBU1RfU3RhdGVtZW50c190ICpjb2RlKQp7CiAgICAvKiBwdXNoIGZpcnN0IHN0YXRlbWVudHMgKi8KICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gY29kZSwKICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX1NUQVRFTUVOVFMKICAgIH0pOwogICAgd2hpbGUgKCFSVF9FdmFsU3RhY2tfaXNlbXB0eSgpKSB7CiAgICAgICAgUlRfU3RhY2tFbnRyeV90IHBvcCA9IFJUX0V2YWxTdGFja19wb3AoKTsKICAgICAgICBzd2l0Y2ggKHBvcC50eXBlKSB7CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUzogewogICAgICAgICAgICAgICAgY29uc3QgQVNUX1N0YXRlbWVudHNfdCAqc3QgPSBwb3AuZW50cnkubm9kZS5jb2RlOwogICAgICAgICAgICAgICAgaWYgKCFzdCkgYnJlYWs7CiAgICAgICAgICAgICAgICAvKiBwdXNoIG5leHQgZW50cnkgdG8gZXZhbCAqLwogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLnN0YXRlbWVudCA9IHN0LT5zdGF0ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLyogcHVzaCBuZXh0IGVudHJ5ICovCiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHN0LT5zdGF0ZW1lbnRzLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX1NUQVRFTUVOVDogewogICAgICAgICAgICAgICAgY29uc3QgQVNUX1N0YXRlbWVudF90ICpzdCA9IHBvcC5lbnRyeS5ub2RlLnN0YXRlbWVudDsKICAgICAgICAgICAgICAgIGlmICghc3QpIGJyZWFrOwogICAgICAgICAgICAgICAgcnRfY3VycmxpbmUgPSBzdC0+bGluZV9ubzsKICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QtPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIFNUQVRFTUVOVF9UWVBFX0VNUFRZOiBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFNUQVRFTUVOVF9UWVBFX1JFVFVSTjogewogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHN0LT5zdGF0ZW1lbnQuZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgU1RBVEVNRU5UX1RZUEVfQVNTSUdOTUVOVDogewogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5hc3NpZ25tZW50ID0gc3QtPnN0YXRlbWVudC5hc3NpZ25tZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9BU1NJR05NRU5UCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FzZSBTVEFURU1FTlRfVFlQRV9DT01QT1VORDogewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBBU1RfQ29tcG91bmRTdF90ICpjbXBkID0gc3QtPnN0YXRlbWVudC5jb21wb3VuZF9zdGF0ZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX3B1c2hfc2NvcGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfVFlQRV9QUk9DX1BPUAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjbXBkLT50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENPTVBPVU5EU1RfVFlQRV9JRjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuaWZfYmxvY2sgPSBjbXBkLT5jb21wb3VuZF9zdGF0ZW1lbnQuaWZfYmxvY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfSUZfQkxPQ0sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ09NUE9VTkRTVF9UWVBFX1dISUxFOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS53aGlsZV9ibG9jayA9IGNtcGQtPmNvbXBvdW5kX3N0YXRlbWVudC53aGlsZV9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9XSElMRV9CTE9DSwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDT01QT1VORFNUX1RZUEVfRk9SOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUubHAuZm9yX2Jsb2NrID0gY21wZC0+Y29tcG91bmRfc3RhdGVtZW50LmZvcl9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLmxwLmkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZyA9IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfTE9PUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDT01QT1VORFNUX1RZUEVfQkxPQ0s6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBBU1RfU3RhdGVtZW50c190ICpzdCA9IGNtcGQtPmNvbXBvdW5kX3N0YXRlbWVudC5ibG9jay0+c3RhdGVtZW50czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmNvZGUgPSBzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9BU1NJR05NRU5UOiB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvcC5lbnRyeS5ub2RlLmFzc2lnbm1lbnQtPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIEFTU0lHTk1FTlRfVFlQRV9UT1ZPSUQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5hc3NpZ25tZW50LT5yaHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKCpSVF9FeHByZXNzaW9uX2V2YWwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXNlIEFTU0lHTk1FTlRfVFlQRV9DUkVBVEU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciAqaWRmID0gcG9wLmVudHJ5Lm5vZGUuYXNzaWdubWVudC0+bGhzLT5pZGVudGlmaWVyX25hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuYXNzaWdubWVudC0+cmhzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfY3JlYXRlKGlkZiwgKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9JRl9CTE9DSzogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuaWZfYmxvY2stPmNvbmRpdGlvbiwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJvb2wgY29uZCA9ICBSVF9EYXRhX3RvYm9vbCgqUlRfRXhwcmVzc2lvbl9ldmFsKCkpOwogICAgICAgICAgICAgICAgaWYgKGNvbmQpIHsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmNvZGUgPSBwb3AuZW50cnkubm9kZS5pZl9ibG9jay0+aWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmVsc2VfYmxvY2sgPSBwb3AuZW50cnkubm9kZS5pZl9ibG9jay0+ZWxzZV9ibG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9FTFNFX0JMT0NLCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0VMU0VfQkxPQ0s6IHsKICAgICAgICAgICAgICAgIC8qIHRha2VzIGNhcmUgb2YgWyBlbHNlIG53cCBzdGF0ZW1lbnRzIGVuZCBdICovCiAgICAgICAgICAgICAgICBpZiAoIXBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmNvbmRpdGlvbiAmJiAhcG9wLmVudHJ5Lm5vZGUuZWxzZV9ibG9jay0+ZWxzZV9ibG9jaykgewogICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmVsc2VfaWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLyogdGFrZXMgY2FyZSBvZiBbIGVsc2UgaWYgY29uZGl0aW9uIHRoZW4gbndwIHN0YXRlbWVudHMgXSAqLwogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZWxzZV9ibG9jay0+Y29uZGl0aW9uLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYm9vbCBjb25kID0gUlRfRGF0YV90b2Jvb2woKlJUX0V4cHJlc3Npb25fZXZhbCgpKTsKICAgICAgICAgICAgICAgIGlmIChjb25kKSB7CiAgICAgICAgICAgICAgICAgICAgLyogaWYgY29uZGl0aW9uIHRydWUsIGV4ZWN1dGUgc3RhdGVtZW50cyBhbmQgZG9uJ3QgZ28KICAgICAgICAgICAgICAgICAgICAgICBhbnkgZnVydGhlciBkb3duIHRoZSBlbHNlIGlmIGxhZGRlciAqLwogICAgICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmVsc2VfYmxvY2stPmVsc2VfaWZfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKiBpZiBjb25kaXRpb24gZmFpbGVkIGFuZCBubyBtb3JlIGVsc2UgaWYgYmxvY2tzLAogICAgICAgICAgICAgICAgICAgICAgIGp1c3QgYnJlYWsgb3V0IGFuZCBkbyBub3RoaW5nICovCiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkubm9kZS5lbHNlX2Jsb2NrLT5lbHNlX2Jsb2NrKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmVsc2VfYmxvY2sgPSBwb3AuZW50cnkubm9kZS5lbHNlX2Jsb2NrLT5lbHNlX2Jsb2NrLAogICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0VMU0VfQkxPQ0sKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfV0hJTEVfQkxPQ0s6IHsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHBvcC5lbnRyeS5ub2RlLndoaWxlX2Jsb2NrLT5jb25kaXRpb24sCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBib29sIGNvbmQgPSBSVF9EYXRhX3RvYm9vbCgqUlRfRXhwcmVzc2lvbl9ldmFsKCkpOwogICAgICAgICAgICAgICAgLyogaWYgY29uZGl0aW9uIGlzIHRydWUsIGRvbid0IGxldCB0aGUgd2hpbGUgYmUgcmVtb3ZlZCBmcm9tIHN0YWNrCiAgICAgICAgICAgICAgICAgICBpLmUuIHB1c2ggaXQgYmFjayBpbnRvIHRoZSBzdGFjayBjb3ogaXQgd2FzIHBvcHBlZCBlYXJsaWVyICovCiAgICAgICAgICAgICAgICBpZiAoY29uZCkgUlRfRXZhbFN0YWNrX3B1c2gocG9wKTsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gcG9wLmVudHJ5Lm5vZGUud2hpbGVfYmxvY2stPnN0YXRlbWVudHMsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9MT09QOiB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvcC5lbnRyeS5zdGF0ZS5scC5mb3JfYmxvY2stPnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIEZPUkJMT0NLX1RZUEVfUkFOR0U6IHsKICAgICAgICAgICAgICAgICAgICAgICAgLyogaWYgbG9vcCBub3QgcnVubmluZywgc3RhcnQgaXQgYW5kIGV2YWwgcmFuZ2UgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2FsY3VsYXRlIHN0YXJ0LCBlbmQgYW5kIGJ5ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLnJhbmdlLnN0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YV90IHN0YXJ0ID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0LnR5cGUgIT0gUlRfREFUQV9UWVBFX0k2NCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygiZm9yIGxvb3AgcmFuZ2Ugc3RhcnQgc2hvdWxkIGJlIGFuIGk2NCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5pdGVyYWJsZS5yYW5nZS5lbmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX3QgZW5kID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZC50eXBlICE9IFJUX0RBVEFfVFlQRV9JNjQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRfdGhyb3coImZvciBsb29wIHJhbmdlIGVuZCBzaG91bGQgYmUgYW4gaTY0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX3QgYnkgPSBSVF9EYXRhX251bGwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLnJhbmdlLmJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IHBvcC5lbnRyeS5ub2RlLmZvcl9ibG9jay0+aXRlcmFibGUucmFuZ2UuYnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSA9ICpSVF9FeHByZXNzaW9uX2V2YWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnkudHlwZSAhPSBSVF9EQVRBX1RZUEVfSTY0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygiZm9yIGxvb3AgYnkgdmFsdWUgc2hvdWxkIGJlIGFuIGk2NCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50NjRfdCBzdGFydF9pID0gc3RhcnQuZGF0YS5pNjQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnQ2NF90IGVuZF9pID0gZW5kLmRhdGEuaTY0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50NjRfdCBieV9pID0gUlRfRGF0YV9pc251bGwoYnkpID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhcnRfaSA8PSBlbmRfaSA/ICsxIDogLTEpIDogYnkuZGF0YS5pNjQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJ5X2kpIHJ0X3Rocm93KCJmb3IgbG9vcCBieSB2YWx1ZSBjYW5ub3QgYmUgMCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoc3RhcnRfaSA8IGVuZF9pICYmIGJ5X2kgPCAwKSB8fCAoc3RhcnRfaSA+IGVuZF9pICYmIGJ5X2kgPiAwKSApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRfdGhyb3coInBvc3NpYmxlIGluZmluaXRlIGZvciBsb29wIGZvciBieSB2YWx1ZSAnJSIgUFJJZDY0ICInIiwgYnlfaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBhZGQgbG9vcCBpbmZvIHRvIGZvciBsb29wIHN0YWNrIGVudHJ5ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2Uuc3RhcnQgPSBzdGFydF9pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmVuZCA9IGVuZF9pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmJ5ID0gYnlfaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHNldCBpIHRvIHN0YXJ0IG9mIHJhbmdlICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaSA9IHN0YXJ0X2k7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdGFydCBsb29wICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBwb3AuZW50cnkuc3RhdGUubHAuaSArPSBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2UuYnk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5yYW5nZS5ieSA+IDAgJiYgcG9wLmVudHJ5LnN0YXRlLmxwLmkgPj0gcG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmVuZCkKICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAocG9wLmVudHJ5LnN0YXRlLmxwLml0LnJhbmdlLmJ5IDwgMCAmJiBwb3AuZW50cnkuc3RhdGUubHAuaSA8PSBwb3AuZW50cnkuc3RhdGUubHAuaXQucmFuZ2UuZW5kKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvKiBicmVhaywgaS5lLiBkb24ndCBwdXNoIG5ldyBsb29wIHN0YXRlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9wLmVudHJ5LnN0YXRlLmxwLmlzX3J1bm5pbmcpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9jcmVhdGUocG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5pdGVyLT5pZGVudGlmaWVyX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9EYXRhX2k2NChwb3AuZW50cnkuc3RhdGUubHAuaSkpOwogICAgICAgICAgICAgICAgICAgICAgICAvKiBwdXNoIG5ld2x5IG1vZGlmaWVkIGxvb3Agc3RhdGUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2gocG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUuY29kZSA9IHBvcC5lbnRyeS5ub2RlLmZvcl9ibG9jay0+c3RhdGVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfU1RBVEVNRU5UUwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhc2UgRk9SQkxPQ0tfVFlQRV9MSVNUOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlmIGxvb3Agbm90IHJ1bm5pbmcsIHN0YXJ0IGl0IGFuZCBldmFsIGxpc3QgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3AuZW50cnkuc3RhdGUubHAuaXNfcnVubmluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29udmVydCBleHByZXNzaW9uIHRvIGEgZGF0YSBsaXN0ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXJhYmxlLmxzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJUX0RhdGFfdCBkYXRhID0gKlJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9MU1Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnR5cGUgPSBSVF9EQVRBX1RZUEVfTFNUOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QgPSBkYXRhLmRhdGEubHN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9TVFI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnR5cGUgPSBSVF9EQVRBX1RZUEVfU1RSOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5zdHIgPSBkYXRhLmRhdGEuc3RyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygidW5zdXBwb3J0ZWQgZGF0YSB0eXBlIGluIGl0ZXJhdG9yIHR5cGUgZm9yIGxvb3AiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHBvcC5lbnRyeS5zdGF0ZS5scC5pICs9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNhbGMgbGlzIGxlbmd0aCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpbnQ2NF90IGxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIudHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfTFNUOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IFJUX0RhdGFMaXN0X2xlbmd0aChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfU1RSOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IFJUX0RhdGFTdHJfbGVuZ3RoKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnN0cik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bnN1cHBvcnRlZCBkYXRhIHR5cGUgaW4gaXRlcmF0b3IgdHlwZSBmb3IgbG9vcCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0b3AgbG9vcCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLmkgPj0gbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkZXN0cm95IGxpc3QgaWYgcmMgaXMgMCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfTFNUOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIubHN0LT5yYyA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YUxpc3RfZGVzdHJveSgmcG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIubHN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSVF9EQVRBX1RZUEVfU1RSOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmVudHJ5LnN0YXRlLmxwLml0Lml0ZXIuc3RyLT5yYyA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YVN0cl9kZXN0cm95KCZwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5zdHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydF90aHJvdygidW5zdXBwb3J0ZWQgZGF0YSB0eXBlIGluIGl0ZXJhdG9yIHR5cGUgZm9yIGxvb3AiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS5scC5pc19ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvKiBicmVhaywgaS5lLiBkb24ndCBwdXNoIG5ldyBsb29wIHN0YXRlICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9wLmVudHJ5LnN0YXRlLmxwLmlzX3J1bm5pbmcpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZSBjdXJyZW50IGl0ZXJhdGlvbiBlbGVtZW50IGluIGxvb3AgdmFyaWFibGUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9MU1Q6IFJUX1ZhclRhYmxlX2NyZWF0ZShwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXItPmlkZW50aWZpZXJfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlJUX0RhdGFMaXN0X2dldHJlZihwb3AuZW50cnkuc3RhdGUubHAuaXQuaXRlci5sc3QsIHBvcC5lbnRyeS5zdGF0ZS5scC5pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJUX0RBVEFfVFlQRV9TVFI6IFJUX1ZhclRhYmxlX2NyZWF0ZShwb3AuZW50cnkubm9kZS5mb3JfYmxvY2stPml0ZXItPmlkZW50aWZpZXJfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUlRfRGF0YV9jaHIoKlJUX0RhdGFTdHJfZ2V0cmVmKHBvcC5lbnRyeS5zdGF0ZS5scC5pdC5pdGVyLnN0ciwgcG9wLmVudHJ5LnN0YXRlLmxwLmkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bnN1cHBvcnRlZCBkYXRhIHR5cGUgaW4gaXRlcmF0b3IgdHlwZSBmb3IgbG9vcCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHB1c2ggbmV3bHkgbW9kaWZpZWQgbG9vcCBzdGF0ZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaChwb3ApOwogICAgICAgICAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5jb2RlID0gcG9wLmVudHJ5Lm5vZGUuZm9yX2Jsb2NrLT5zdGF0ZW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9TVEFURU1FTlRTCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUjogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gcG9wLmVudHJ5Lm5vZGUuZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIFJUX0V4cHJlc3Npb25fZXZhbCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX1RZUEVfU0NPUEVfUE9QOiB7CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9wb3Bfc2NvcGUoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfQ09NTUFfU0VQX0xJU1Q6CiAgICAgICAgICAgIGNhc2UgU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfTElURVJBTDoKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9JREVOVElGSUVSOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0ZPUl9CTE9DSzoKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9FWFBSRVNTSU9OOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfVFlQRV9BU1ROT0RFOgogICAgICAgICAgICBjYXNlIFNUQUNLRU5UUllfVFlQRV9TVEFURToKICAgICAgICAgICAgY2FzZSBTVEFDS0VOVFJZX1RZUEVfUFJPQ19QT1A6IGJyZWFrOwogICAgICAgIH0KICAgIH0KfQoKUlRfRGF0YV90ICpSVF9FeHByZXNzaW9uX2V2YWwodm9pZCkKewogICAgaWYgKFJUX0V2YWxTdGFja19pc2VtcHR5KCkpCiAgICAgICAgaW9fZXJybmRpZSgiUlRfRXhwcmVzc2lvbl9ldmFsOiBzdGFjayB1bmRlcmZsb3ciKTsKICAgIGVsc2UgaWYgKFJUX0V2YWxTdGFja190b3AoKS50eXBlICE9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUikKICAgICAgICBpb19lcnJuZGllKCJSVF9FeHByZXNzaW9uX2V2YWw6IG5vIGV4cHJlc3Npb24gYXQgc3RhY2sgdG9wIik7CiAgICAvKiBzZXQgYWNjdW11bGF0b3IgdG8gbnVsbCAqLwogICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAvKiBkZnMgdGhlIGV4cHJlc3Npb24gdHJlZSBhbmQgZXZhbHVhdGUgKi8KICAgIHdoaWxlICghUlRfRXZhbFN0YWNrX2lzZW1wdHkoKSAmJiBSVF9FdmFsU3RhY2tfdG9wKCkudHlwZSA9PSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIpIHsKICAgICAgICBSVF9TdGFja0VudHJ5X3QgcG9wID0gUlRfRXZhbFN0YWNrX3BvcCgpOwogICAgICAgIGNvbnN0IEFTVF9FeHByZXNzaW9uX3QgKmV4cHIgPSBwb3AuZW50cnkuc3RhdGUueHAuZXhwcjsKICAgICAgICAvKiBldmFsIGxocyBvcGVyYW5kICovCiAgICAgICAgaWYgKFJUX0RhdGFfaXNudWxsKFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsKQogICAgICAgICAmJiAhUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIpIHN3aXRjaCAoZXhwci0+bGhzX3R5cGUpIHsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfRVhQUkVTU0lPTjogewogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHByID0gZXhwci0+bGhzLmV4cHIsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmxocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLnJocyA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfU1RBVEVTX1RZUEVfRVhQUgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9MSVRFUkFMOgogICAgICAgICAgICAgICAgUlRfRXZhbFN0YWNrX3B1c2goKGNvbnN0IFJUX1N0YWNrRW50cnlfdCkgewogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5ub2RlLmxpdGVyYWwgPSBleHByLT5saHMubGl0ZXJhbCwKICAgICAgICAgICAgICAgICAgICAudHlwZSA9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0xJVEVSQUwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsKCk7CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9JREVOVElGSUVSOgogICAgICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX1ZhclRhYmxlX2dldHJlZihleHByLT5saHMudmFyaWFibGUtPmlkZW50aWZpZXJfbmFtZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTlVMTDogYnJlYWs7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmxocyA9IFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyID8KICAgICAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyIDogJlJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsOwogICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgICAgICB9CiAgICAgICAgLyogZXZhbCByaHMgb3BlcmFuZCAqLwogICAgICAgIGlmIChSVF9EYXRhX2lzbnVsbChSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPnZhbCkKICAgICAgICAgJiYgIVJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyKSBzd2l0Y2ggKGV4cHItPnJoc190eXBlKSB7CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX0VYUFJFU1NJT046IHsKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXhwciA9IGV4cHItPnJocy5leHByLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IE5VTEwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTElURVJBTDoKICAgICAgICAgICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgICAgICAgICAuZW50cnkubm9kZS5saXRlcmFsID0gZXhwci0+cmhzLmxpdGVyYWwsCiAgICAgICAgICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX0FTVE5PREVfVFlQRV9MSVRFUkFMCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCgpOwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfSURFTlRJRklFUjoKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9WYXJUYWJsZV9nZXRyZWYoZXhwci0+cmhzLnZhcmlhYmxlLT5pZGVudGlmaWVyX25hbWUpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX05VTEw6IGJyZWFrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5yaHMgPSBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA/CiAgICAgICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA6ICZSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPnZhbDsKICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgfQogICAgICAgIC8qIGV2YWwgY29uZGl0aW9uIG9wZXJhbmQgKi8KICAgICAgICBpZiAoUlRfRGF0YV9pc251bGwoUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWwpCiAgICAgICAgICYmICFSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkcikgc3dpdGNoIChleHByLT5jb25kaXRpb25fdHlwZSkgewogICAgICAgICAgICBjYXNlIEVYUFJfVFlQRV9FWFBSRVNTSU9OOiB7CiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBleHByLT5jb25kaXRpb24uZXhwciwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAubGhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgICAgICAgICAuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBOVUxMLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9TVEFURVNfVFlQRV9FWFBSCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgRVhQUl9UWVBFX0xJVEVSQUw6CiAgICAgICAgICAgICAgICBSVF9FdmFsU3RhY2tfcHVzaCgoY29uc3QgUlRfU3RhY2tFbnRyeV90KSB7CiAgICAgICAgICAgICAgICAgICAgLmVudHJ5Lm5vZGUubGl0ZXJhbCA9IGV4cHItPmNvbmRpdGlvbi5saXRlcmFsLAogICAgICAgICAgICAgICAgICAgIC50eXBlID0gU1RBQ0tFTlRSWV9BU1ROT0RFX1RZUEVfTElURVJBTAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBwb3AuZW50cnkuc3RhdGUueHAuZXh0cmEgPSBSVF9FeHByZXNzaW9uX2V2YWxfbGl0ZXJhbCgpOwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX3NldHZhbChSVF9EYXRhX251bGwoKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfSURFTlRJRklFUjoKICAgICAgICAgICAgICAgIHBvcC5lbnRyeS5zdGF0ZS54cC5leHRyYSA9IFJUX1ZhclRhYmxlX2dldHJlZihleHByLT5jb25kaXRpb24udmFyaWFibGUtPmlkZW50aWZpZXJfbmFtZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBFWFBSX1RZUEVfTlVMTDogYnJlYWs7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9wLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgPwogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgOiAmUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWw7CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9udWxsKCkpOwogICAgICAgIH0KICAgICAgICAvKiBhbGwgb3BlcmFuZHMgZXZhbHVhdGVkLCBub3cgcGVyZm9ybSBvcGVyYXRpb25zICovCiAgICAgICAgc3dpdGNoIChleHByLT5vcCkgewogICAgICAgICAgICBjYXNlIExFWFRPS19CQU5HOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX1VORVFVQUw6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BFUkNFTlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX01PRFVMT19BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FNUEVSU0FORDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9BTkQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0xPR0lDQUxfQU5EX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9BTkRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19BU1RFUklYOgogICAgICAgICAgICBjYXNlIExFWFRPS19FWFBPTkVOVDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRVhQT05FTlRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19NVUxUSVBMWV9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BMVVM6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0lOQ1JFTUVOVDoKICAgICAgICAgICAgICAgIHJ0X3Rocm93KCJ1bmFyeSBpbmNyZW1lbnQgb3BlcmF0b3IgaXMgbm90IHlldCBzdXBwb3J0ZWQiKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIExFWFRPS19BRERfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19NSU5VUzoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfREVDUkVNRU5UOgogICAgICAgICAgICBjYXNlIExFWFRPS19TVUJTVFJBQ1RfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19ET1Q6CiAgICAgICAgICAgICAgICBydF90aHJvdygibWVtZWJlcnNoaXAgb3BlcmF0b3IgaXMgbm90IHlldCBzdXBwb3J0ZWQiKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIExFWFRPS19GU0xBU0g6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0ZMT09SX0RJVklERToKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRkxPT1JfRElWSURFX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRElWSURFX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfRENPTE9OOgogICAgICAgICAgICBjYXNlIExFWFRPS19MQlJBQ0VfQU5HVUxBUjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9MU0hJRlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0JJVFdJU0VfTFNISUZUX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9MRVNTRVJfRVFVQUw6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FTU0lHTjogewogICAgICAgICAgICAgICAgUlRfVmFyVGFibGVfbW9kZihwb3AuZW50cnkuc3RhdGUueHAubGhzLCAqcG9wLmVudHJ5LnN0YXRlLnhwLnJocyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX0VRVUFMOgogICAgICAgICAgICBjYXNlIExFWFRPS19SQlJBQ0VfQU5HVUxBUjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfTE9HSUNBTF9HUkVBVEVSX0VRVUFMOgogICAgICAgICAgICBjYXNlIExFWFRPS19CSVRXSVNFX1JTSElGVDoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfQklUV0lTRV9SU0hJRlRfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19BUklUSF9SU0hJRlQ6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0FSSVRIX1JTSElGVF9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0NBUkVUOgogICAgICAgICAgICBjYXNlIExFWFRPS19CSVRXSVNFX1hPUl9BU1NJR046CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX1BJUEU6CiAgICAgICAgICAgIGNhc2UgTEVYVE9LX0JJVFdJU0VfT1JfQVNTSUdOOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX09SOgogICAgICAgICAgICBjYXNlIExFWFRPS19MT0dJQ0FMX09SX0FTU0lHTjoKICAgICAgICAgICAgY2FzZSBMRVhUT0tfVElMREU6CiAgICAgICAgICAgIGNhc2UgVE9LT1BfRk5DQUxMOgogICAgICAgICAgICBjYXNlIFRPS09QX0lOREVYSU5HOgogICAgICAgICAgICBjYXNlIFRPS09QX1RFUk5BUllfQ09ORDoKICAgICAgICAgICAgY2FzZSBUT0tPUF9GTkFSR1NfSU5ERVhJTkc6IGJyZWFrOwogICAgICAgICAgICBjYXNlIFRPS09QX05PUDogYnJlYWs7CiAgICAgICAgICAgIC8qIHN0dWZmIHRoYXQgZG9lc24ndCBmb3JtIGFuIG9wZXJhdGlvbiAqLwogICAgICAgICAgICBkZWZhdWx0OiBpb19lcnJuZGllKCJSVF9FeHByZXNzaW9uX2V2YWw6IGludmFsaWQgb3BlcmF0aW9uICclcyciLCBsZXhfZ2V0X3Rva2NvZGUoZXhwci0+b3ApKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgPwogICAgICAgIFJUX1ZhclRhYmxlX2FjY19nZXQoKS0+YWRyIDogJlJUX1ZhclRhYmxlX2FjY19nZXQoKS0+dmFsOwp9CgpSVF9EYXRhX3QgKlJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsKHZvaWQpCnsKICAgIGlmIChSVF9FdmFsU3RhY2tfaXNlbXB0eSgpKQogICAgICAgIGlvX2Vycm5kaWUoIlJUX0V4cHJlc3Npb25fZXZhbF9saXRlcmFsOiBzdGFjayB1bmRlcmZsb3ciKTsKICAgIGVsc2UgaWYgKFJUX0V2YWxTdGFja190b3AoKS50eXBlICE9IFNUQUNLRU5UUllfQVNUTk9ERV9UWVBFX0xJVEVSQUwpCiAgICAgICAgaW9fZXJybmRpZSgiUlRfRXhwcmVzc2lvbl9ldmFsX2xpdGVyYWw6IG5vIGxpdGVyYWwgYXQgc3RhY2sgdG9wIik7CiAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfbnVsbCgpKTsKICAgIFJUX1N0YWNrRW50cnlfdCBwb3AgPSBSVF9FdmFsU3RhY2tfcG9wKCk7CiAgICBjb25zdCBBU1RfTGl0ZXJhbF90ICpsaXQgPSBwb3AuZW50cnkubm9kZS5saXRlcmFsOwogICAgc3dpdGNoIChsaXQtPnR5cGUpIHsKICAgICAgICBjYXNlIERBVEFfVFlQRV9CVUw6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9idWwobGl0LT5kYXRhLmJ1bCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9DSFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9jaHIobGl0LT5kYXRhLmNocikpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9JNjQ6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9pNjQobGl0LT5kYXRhLmk2NCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9GNjQ6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9mNjQobGl0LT5kYXRhLmY2NCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9TVFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9zdHIoUlRfRGF0YVN0cl9pbml0KGxpdC0+ZGF0YS5zdHIpKSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgREFUQV9UWVBFX0lOVEVSUF9TVFI6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRGF0YV9pbnRlcnBfc3RyKFJUX0RhdGFTdHJfaW5pdChsaXQtPmRhdGEuc3RyKSkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIERBVEFfVFlQRV9MU1Q6CiAgICAgICAgICAgIFJUX1ZhclRhYmxlX2FjY19zZXR2YWwoUlRfRXhwcmVzc2lvbl9ldmFsX2xzdChsaXQtPmRhdGEubHN0KSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgREFUQV9UWVBFX0FOWToKICAgICAgICAgICAgLyogdm9pZCogbXVzdCBiZSBleHBsaWNpdGx5IGNhc3RlZCAqLwogICAgICAgICAgICBSVF9WYXJUYWJsZV9hY2Nfc2V0dmFsKFJUX0RhdGFfYW55KCh2b2lkKikgbGl0LT5kYXRhLmFueSkpOwogICAgICAgICAgICBicmVhazsKICAgIH0KICAgIHJldHVybiBSVF9WYXJUYWJsZV9hY2NfZ2V0KCktPmFkciA/CiAgICAgICAgUlRfVmFyVGFibGVfYWNjX2dldCgpLT5hZHIgOiAmUlRfVmFyVGFibGVfYWNjX2dldCgpLT52YWw7Cn0KClJUX0RhdGFfdCBSVF9FeHByZXNzaW9uX2V2YWxfbHN0KGNvbnN0IEFTVF9Db21tYVNlcExpc3RfdCAqbHN0KQp7CiAgICBjb25zdCBBU1RfQ29tbWFTZXBMaXN0X3QgKnB0ciA9IGxzdDsKICAgIFJUX0RhdGFMaXN0X3QgKm5ld19saXN0ID0gUlRfRGF0YUxpc3RfaW5pdCgpOwogICAgd2hpbGUgKHB0cikgewogICAgICAgIFJUX0V2YWxTdGFja19wdXNoKChjb25zdCBSVF9TdGFja0VudHJ5X3QpIHsKICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4cHIgPSBwdHItPmV4cHJlc3Npb24sCiAgICAgICAgICAgIC5lbnRyeS5zdGF0ZS54cC5saHMgPSBOVUxMLAogICAgICAgICAgICAuZW50cnkuc3RhdGUueHAucmhzID0gTlVMTCwKICAgICAgICAgICAgLmVudHJ5LnN0YXRlLnhwLmV4dHJhID0gTlVMTCwKICAgICAgICAgICAgLnR5cGUgPSBTVEFDS0VOVFJZX1NUQVRFU19UWVBFX0VYUFIKICAgICAgICB9KTsKICAgICAgICBSVF9EYXRhTGlzdF9hcHBlbmQobmV3X2xpc3QsICpSVF9FeHByZXNzaW9uX2V2YWwoKSk7CiAgICAgICAgcHRyID0gcHRyLT5jb21tYV9saXN0OwogICAgfQogICAgcmV0dXJuIFJUX0RhdGFfbGlzdChuZXdfbGlzdCk7Cn0KAAAAAAAAAACuggAAAAAAAAAAAAAAAAAAAAAAAK6CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMaQAAAAAAAExpAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/runtime/functions.c.h",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/runtime/functions.h",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bran",
				"Git: Change Branch"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"gd",
				"Git: Diff All Files"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"term",
				"Terminus: List Shells"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"ga",
				"Git: Add All"
			],
			[
				"gp",
				"Git: Push"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"the",
				"UI: Customize Theme"
			],
			[
				"lsp res",
				"LSP: Restart Server"
			],
			[
				"lsp en",
				"LSP: Enable Language Server Globally"
			],
			[
				"colo",
				"UI: Customize Color Scheme"
			],
			[
				"gc",
				"Git: Commit"
			],
			[
				"termi",
				"Terminus: Close All"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"comm",
				"Git: Amend Commit"
			],
			[
				"gat ad",
				"Git: Add All"
			],
			[
				"gdi",
				"Git: Diff All Files"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"fol",
				"Code Folding: Fold All"
			],
			[
				"pu",
				"Git: Pull"
			],
			[
				"am",
				"Git: Amend Commit"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"git pll",
				"Git: Pull"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"th",
				"UI: Select Theme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"cop",
				"File: Copy Path"
			],
			[
				"ren",
				"Rename File"
			],
			[
				"fo",
				"LSP: Format File"
			],
			[
				"for",
				"LSP: Format File"
			],
			[
				"frm",
				"Clang Format: Select Style"
			],
			[
				"form",
				"LSP: Format File"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"lsp",
				"LSP: Toggle Log Panel"
			],
			[
				"bui",
				"Build With: Make"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"ter",
				"Preferences: Terminus Settings"
			],
			[
				"clang",
				"Preferences: LSP-clangd Settings"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"side",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"pack",
				"Package Control: Remove Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 233.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/aviruk/git/shsc-lang",
		"/home/aviruk/git/shsc-lang/include",
		"/home/aviruk/git/shsc-lang/include/runtime",
		"/home/aviruk/git/shsc-lang/src",
		"/home/aviruk/git/shsc-lang/src/runtime"
	],
	"file_history":
	[
		"/home/aviruk/git/shsc-lang/src/ast2json.c",
		"/home/aviruk/git/shsc-lang/tests/SyntaxTree.json",
		"/home/aviruk/git/shsc-lang/src/parser.y",
		"/home/aviruk/git/shsc-lang/src/ast/util/module_stack.c.h",
		"/home/aviruk/git/shsc-lang/src/ast/util/procedure_map.c.h",
		"/home/aviruk/git/shsc-lang/src/runtime/vartable.c.h",
		"/home/aviruk/git/shsc-lang/src/ast/nodes/create.c.h",
		"/home/aviruk/git/shsc-lang/src/runtime/util/evalstack.c.h",
		"/home/aviruk/git/shsc-lang/src/runtime.c",
		"/home/aviruk/git/shsc-lang/src/main.c",
		"/home/aviruk/git/shsc-lang/test.log",
		"/home/aviruk/git/shsc-lang/debug.log",
		"/home/aviruk/git/shsc-lang/include/runtime.h",
		"/home/aviruk/git/shsc-lang/include/ast/api.h",
		"/home/aviruk/git/shsc-lang/src/runtime/data.c.h",
		"/home/aviruk/git/shsc-lang/include/ast.h",
		"/home/aviruk/git/shsc-lang/include/ast2json.h",
		"/home/aviruk/git/shsc-lang/include/ast/nodes/enums.h",
		"/home/aviruk/git/shsc-lang/compile_flags.txt",
		"/C/Users/aviruk/git/shsc-lang/src/main.c",
		"/C/Users/aviruk/git/shsc-lang/test.log",
		"/C/Users/aviruk/git/shsc-lang/tests/SyntaxTree.json",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/vartable.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/vartable.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/nodes/create.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser.y",
		"/C/Users/aviruk/git/shsc-lang/src/ast2json.c",
		"/C/Users/aviruk/git/shsc-lang/shsc-lang.sublime-project",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/LSP.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/LSP/LSP.sublime-settings",
		"/C/Users/aviruk/git/shsc-lang/include/runtime.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime.c",
		"/C/Users/aviruk/git/shsc-lang/Makefile",
		"/C/Users/aviruk/git/shsc-lang/include/lexer.h",
		"/C/Users/aviruk/git/shsc-lang/docs/CONTRIBUTING.md",
		"/C/Users/aviruk/git/shsc-lang/include/parser.yy.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data/string.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/runtime/data/list.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_bool.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_chr.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_f64.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_i64.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/parser/parse_str.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/buffer.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/io.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_identifiers.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_literals.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/lexer/match_keywords.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/nodes/destroy.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/util/module_stack.c.h",
		"/C/Users/aviruk/git/shsc-lang/src/ast/util/procedure_map.c.h",
		"/C/Unix/llvm-mingw-64/include/stdlib.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/io.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/util/evalstack.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes/create.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/util.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/api.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes.h",
		"/C/Users/aviruk/git/shsc-lang/compile_flags.txt",
		"/C/Users/aviruk/git/shsc-lang/include/parser.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data/list.h",
		"/C/Users/aviruk/git/shsc-lang/include/runtime/data/string.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast.h",
		"/C/Users/aviruk/git/shsc-lang/include/io.h",
		"/C/Users/aviruk/codes/gfg-shortest-source-to-destination-path.cpp",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/clang_format_custom.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/clang_format.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Clang Format/clang_format_custom.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Clang Format/clang_format.sublime-settings",
		"/C/Users/aviruk/git/shsc-lang/compile_commands.json",
		"/C/Users/aviruk/git/shsc-lang/src/lexer.c",
		"/C/Users/aviruk/git/shsc-lang/.clangd",
		"/C/Users/aviruk/git/shsc-lang/tests/test.txt",
		"/C/Users/aviruk/git/shsc-lang/tests/dump.txt",
		"/C/Users/aviruk/git/shsc-lang/tests/tlib/stacktest.c",
		"/C/Users/aviruk/git/shsc-lang/src/Makefile",
		"/C/Users/aviruk/git/shsc-lang/include/ast2json.h",
		"/C/Unix/llvm-mingw-64/include/stdio.h",
		"/C/Users/aviruk/git/shsc-lang/include/errcodes.h",
		"/C/Users/aviruk/git/shsc-lang/include/ast/nodes/enums.h",
		"/C/Users/aviruk/git/shsc-lang/src/io.c",
		"/C/Users/aviruk/AppData/Local/Sublime Text/Package Storage/LSP-clangd/clangd_16.0.2/lib/clang/16/include/stdarg.h",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/User/Package Control.sublime-settings",
		"/C/Users/aviruk/AppData/Roaming/Sublime Text/Packages/Package Control/Package Control.sublime-settings",
		"/D/0/Linux/home/aviruk/Downloads/xhash.c"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" = RT_Data_null(),"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" = NULL,"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/runtime.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33454,
						"regions":
						{
						},
						"selection":
						[
							[
								26956,
								26956
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										27061,
										27062
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										26859,
										26860
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 3,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/src/runtime.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8386.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/runtime/functions.c.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/src/runtime/functions.c.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/runtime/functions.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/aviruk/git/shsc-lang/include/runtime/functions.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.0690607734807,
			0.96993385448,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 488.0
	},
	"output.Terminus":
	{
		"height": 212.0
	},
	"output.diagnostics":
	{
		"height": 544.0
	},
	"output.exec":
	{
		"height": 126.400001526
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 178.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "shsc-lang.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 207.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
