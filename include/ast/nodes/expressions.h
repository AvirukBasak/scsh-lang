#ifndef AST_NODES_EXPRESSIONS_H
#define AST_NODES_EXPRESSIONS_H

#include "ast.h"

enum AST_BinaryOperatorType_t {
    BINOP_TYPE_ASSIGN,
    BINOP_TYPE_OR_ASSIGN,
    BINOP_TYPE_AND_ASSIGN,
    BINOP_TYPE_BITWISE_OR_ASSIGN,
    BINOP_TYPE_BITWISE_XOR_ASSIGN,
    BINOP_TYPE_BITWISE_AND_ASSIGN,
    BINOP_TYPE_ARITH_RSHIFT_ASSIGN,
    BINOP_TYPE_LSHIFT_ASSIGN,
    BINOP_TYPE_RSHIFT_ASSIGN,
    BINOP_TYPE_ADD_ASSIGN,
    BINOP_TYPE_SUBTRACT_ASSIGN,
    BINOP_TYPE_MULTIPLY_ASSIGN,
    BINOP_TYPE_DIVIDE_ASSIGN,
    BINOP_TYPE_MODULO_ASSIGN,
    BINOP_TYPE_EXPONENTIATION_ASSIGN,
    BINOP_TYPE_FLOOR_DIVIDE_ASSIGN,
    BINOP_TYPE_LOGICAL_OR,
    BINOP_TYPE_LOGICAL_AND,
    BINOP_TYPE_BITWISE_OR,
    BINOP_TYPE_BITWISE_XOR,
    BINOP_TYPE_BITWISE_AND,
    BINOP_TYPE_EQUAL,
    BINOP_TYPE_UNEQUAL,
    BINOP_TYPE_LESS,
    BINOP_TYPE_GREATER,
    BINOP_TYPE_LESS_EQUAL,
    BINOP_TYPE_GREATER_EQUAL,
    BINOP_TYPE_ARITH_RSHIFT,
    BINOP_TYPE_LSHIFT,
    BINOP_TYPE_RSHIFT,
    BINOP_TYPE_ADD,
    BINOP_TYPE_SUBTRACT,
    BINOP_TYPE_MULTIPLY,
    BINOP_TYPE_DIVIDE,
    BINOP_TYPE_MODULO,
    BINOP_TYPE_EXPONENTIATION,
    BINOP_TYPE_FLOOR_DIVIDE,
};

enum AST_UnaryOperatorType_t {
    UNOP_TYPE_NEGATE,
    UNOP_TYPE_LOGICAL_NOT,
    UNOP_TYPE_BITWISE_NOT,
    UNOP_TYPE_PRE_INCREMENT,
    UNOP_TYPE_PRE_DECREMENT,
    UNOP_TYPE_POST_INCREMENT,
    UNOP_TYPE_POST_DECREMENT,
};

enum AST_OperatorAssocType_t {
    OPASSOC_TYPE_LEFT,
    OPASSOC_TYPE_RIGHT,
};

/* Various expressions: --------------------------------- */



/* End of various expressions --------------------------- */

#endif
